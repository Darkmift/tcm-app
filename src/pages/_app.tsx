// styles
import '@fontsource/roboto/300.css'
import '@fontsource/roboto/400.css'
import '@fontsource/roboto/500.css'
import '@fontsource/roboto/700.css'
import '@/styles/globals.css'
// next
import type {AppProps} from 'next/app'
import ResponsiveAppBar from '@/components/layout/navbar'
import Head from 'next/head'
// mui
import Container from '@mui/material/Container'
// redux
import {Provider} from 'react-redux'
import store, {useAppSelector, useAppDispatch} from '@/store'
import {useEffect} from 'react'
import LocalStorageService from '@/Services/LocalStorageService'
import {login} from '@/store/user.slice'
import {ROLE_LS_KEY, TOKEN_LS_KEY, USERNAME_LS_KEY} from '@/const'

// handle session logic with localstorage etc
function WatchUserRedux() {
  const dispatch = useAppDispatch()
  const kickUser = useAppSelector((state) => state.auth.kickUser)
  // token,role,name set in HttpService->login
  useEffect(() => {
    const token = LocalStorageService.get(TOKEN_LS_KEY)
    const role = LocalStorageService.get(ROLE_LS_KEY)
    const name = LocalStorageService.get(USERNAME_LS_KEY)
    if (!!token && !!role && !!name) {
      dispatch(login({role, name}))
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])
  useEffect(() => {
    if (kickUser) {
      LocalStorageService.delete(TOKEN_LS_KEY)
      LocalStorageService.delete(ROLE_LS_KEY)
      LocalStorageService.delete(USERNAME_LS_KEY)
    }
  }, [kickUser])
  return <></>
}

export default function App({Component, pageProps}: AppProps) {
  return (
    <Provider store={store}>
      <Head>
        <title>TCM</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <WatchUserRedux />
      <ResponsiveAppBar />
      <Container
        sx={{
          display: 'flex',
          flexDirection: 'column',
          my: 3
        }}
      >
        <Component {...pageProps} />
      </Container>
    </Provider>
  )
}
